---
openapi: 3.0.0
info:
  title: KAL API
  description: |
    This is the kal API. You can use or download the Kal app at https://app.kal.supermuel.fr
  termsOfService: https://kal.supermuel.fr/terms/
  contact:
    email: contact@kal.supermuel.fr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-alpha-oas3
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://virtserver.swaggerhub.com/SuperMuel/kal_api/1.0.0
  - url: http://virtserver.swaggerhub.com/SuperMuel/kal_api/1.0.0
tags:
  - name: user
    description: Operations about user
  - name: mirror
    description: Operations about mirror
  - name: mirrorSubscription
    description: Operations about mirror subscriptions
  - name: rule
    description: Operations about rules
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: User must first authenticate with the oAuth provider to get an tokenID.
      operationId: createUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_body"
        required: true
      responses:
        "200":
          description: Account successfully created.
        "400":
          description: invalid tokenID (invalid-tokenID) or username (invalid-username)
        "409":
          description: Account already created for this tokenID (account-exists), or username already taken (username-taken).
  /mirrors:
    get:
      tags:
        - mirror
      summary: Get the public mirrors, or search for one.
      description: |
        Private mirrors of the authenticated user won't be included, but public ones will.
        Mirrors that do not have a owner assigned won't be included.
      operationId: getPublicMirrors
      parameters:
        - name: search
          in: query
          description: |
            Search for pattern in the mirror's title description or owner's username. Max length: 100
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: sort
          in: query
          description: by likes, by creation date (default), by subscribers, by aphabetical title
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - creation_date
              - likes
              - subscribers_count
              - alphabetical
        - name: order
          in: query
          description: Whether to sort the results in ascending order or in descending order
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: limit
          in: query
          description: Maximum of entities returned. Maximum is 100.
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: offset
          in: query
          description: Number of entities to skip
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: groupLeavesIDs
          in: query
          description: Mirrors returned will reflect at least one of the group leaves specified by their id
          required: false
          style: form
          explode: true
          schema:
            maxItems: 10
            type: array
            items:
              $ref: "#/components/schemas/ID"
        - name: liked
          in: query
          description: Whether to return only liked mirrors
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mirror"
        "400":
          description: |
            Returned if :
            - `limit` is > 100 or
            - `search` length is > 100
            - ids are malformed
            - too many group leaves
  /user/{username}/mirrors:
    get:
      tags:
        - mirror
      summary: Get a paginated view of the mirrors created by the authenticated user, or get all the public mirrors of another user.
      operationId: getUserMirrors
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: visibility
          in: query
          description: |
            **public**: Returns only the public mirrors of the specified user
            **private**: Returns only the private mirrors of the specified user. Returns a 401 status code if `username` isn't the authenticated user.

            **any**: (Default) Returns the public mirrors of `username`, and also the private ones if that user is the authenticated one.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - public
              - private
              - any
        - name: limit
          in: query
          description: Maximum of entities returned. Maximum is 100.
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: offset
          in: query
          description: Number of entities to skip
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: Mirrors found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mirror"
        "400":
          description: |
            invalid username, or `limit` > 100
        "401":
          description: Unauthorized. Returned when `username` isn't the authenticated user, and `visibility` is explicitly set to `private`
        "404":
          description: User not found
  /user/{username}/mirror/{mirrorID}:
    get:
      tags:
        - mirror
        - rule
      summary: Get a public mirror of another user, of any mirror of the authenticated user.
      operationId: getUserMirror
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: mirrorID
          in: path
          description: The id the requested mirror
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        "200":
          description: Mirror found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mirror"
        "400":
          description: "Returned if :\n- `limit` is > 100     \n- invalid username\n- invalid mirrorID\n"
        "401":
          description: Unauthorized. Returned when the accessed mirror is private and doesn't belong to the authenticated user.
        "404":
          description: User not found (user-not-found) / Mirror not found (mirror-not-found)
    post:
      tags:
        - mirror
        - rule
      summary: "Creates a new mirror having the `mirrorID` identifier. \n"
      description: |
        To update a mirror, use instead the PATCH method.


        If `owner` is specified, it should match the username of the
        authenticated user making the request, and the username in the query parameters. Otherwise it's automatically set by the server to the authenticated user.


        If `id` is specified in the body, it should match with the one given in the query parameters.


        # The following fields *will be ignored* :
        - `liked` : Default is set to false.
        - `likes` : Automatically set to 0
        - `subscribersCount`: Automatically set to 0
        - `creationDateTime`: automatically set on the server
        - `lastModification`: automatically set on the server
        - `rulesIDs` To edit rules that applies to this mirror, use the `/user/{username}/mirror/{mirrorID}/rule/{ruleID} endpoint`
      operationId: createUserMirror
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: mirrorID
          in: path
          description: The id the requested mirror
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mirror_mirrorID_body"
        required: true
      responses:
        "400":
          description: "Returned for one of the following reasons:\n  - the mirror reflects too many group leaves (too-many-group-leaves)\n  - the path id doesn't match the id given in the body parameters \n"
        "409":
          description: |
            - ID conflict
        "401":
          description: Unauthorized. User is not authenticated, or his account is incomplete.
    delete:
      tags:
        - mirror
      summary: Deletes the mirror
      description: "### Deletion of a private mirror:\n- Fails is the owner is still subscribed to it. UI should allow the user to unsubscribe from it before deleting the mirror. \n\n\n---\n### Deletion of a public mirror:\n- The mirrror has subscribers :\n  - The user is subscribed : fails\n  - Other users are subscribed: The mirror won't be deleted entirely for now. The owner will be deferenced from the mirror. The mirror will have a null owner, but it will have on effect on the current subscriptions: users will still have their events synced.\n- Likes are totaly removed. This mirror won't have likes anymore.\n- Won't be shown in search results.\n- So subscribers that unsubsribe from it won't be able to subscribe again.\n- When the subscribers count goes to 0, the mirror is this time entirely deleted.\n---\n  New subscriptions should not happen and this must be asserted on the server. \n"
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: mirrorID
          in: path
          description: The id the requested mirror
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        "200":
          description: Mirror successfully deleted
        "400":
          description: |
            - Invalid username
            - Invalid mirrorID
        "404":
          description: |
            - User not found
            - Mirror not found (user has no access to it)
    patch:
      tags:
        - mirror
        - rule
      summary: |
        Updates the mirror having the `mirrorID` identifier.
      description: |
        If `owner` is specified, it should match the username of the authenticated user making the request, and the username in the query parameters. Otherwise it's automatically set by the server to the authenticated user.

        If `id` is specified in the body, it should match with the one given in the query parameters

        If `groupLeavesIDs` isn't specified or is null, this request won't touch the existing groupLeaves.\
        If specified, the new list will entirely replace the existing list.

        ### The following fields, if specified, *will be ignored*:
          - `public` To change the visibility, instead use `POST /user/{username}/mirror/{mirrorID}/setVisibility?visibility=`
          - `likes` Instead, to like or unlike a mirror, use `POST /user/{username}/mirror/{mirrorID}/like?true|false`
          - `subscribersCount`Instead, to subscribe or unsubscribe to this mirror, use POST /user/{username}/mirror/{mirrorID}/setSubscription?true|false
          - `creationDateTime`. This attribute doesn't until the deletion of the resource.
          - `lastUpdateDateTime`  The server will update it automatically when processing the request.
          - `rulesIDs` To edit rules that applies to this mirror, use the `/user/{username}/mirror/{mirrorID}/rule/{ruleID} endpoint`
      operationId: updateUserMirror
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: mirrorID
          in: path
          description: The id the requested mirror
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mirror_mirrorID_body_1"
        required: true
      responses:
        "400":
          description: "Returned for one of the following reasons:\n  - the mirror reflects too many group leaves (too-many-group-leaves)\n  - the path id doesn't match the id given in the body parameters \n  - Invalid title (empty, too long)\n  - Invalid description (too long)\n"
        "401":
          description: "Unauthorized.\n- User is not authenticated\n\n- User account is incomplete (incomplete-account)\\\n//TODO search for custom error specification\n\n- the user pointed by the query parameter `username` isn't the authenticated one. \n"
  /user/{username}/mirror/{mirrorID}/copy:
    post:
      tags:
        - mirror
      summary: Copy a public mirror to the user's account, or duplicate a private one
      description: |
        - The user is interested by another published mirror, and wants the same but on his account.
        - The user has already created a mirror (no matter if it's public or private), and wants to duplicate it on his account.

        By default, the new mirror is private.
      operationId: copyUserMirror
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: mirrorID
          in: path
          description: The id the requested mirror
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        "200":
          description: Mirror successfully copied, returns the newly created mirror.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mirror"
        "400":
          description: |
            - Invalid username
            - Invalid mirrorID
        "401":
          description: |
            Unauthorized. User is not authenticated, or his account is
            incomplete.
        "404":
          description: |
            - User not found
            - mirror not found (also when the authenticated user hasn't access to this mirror)
  /user/{username}/mirror/{mirrorID}/subscribe:
    post:
      summary: Subscribe to this mirror
      description: |
        Subscribe to the targeted mirror.

        If mirrorID is specified in the body, it should match the query parameter
      operationId: subscribeToMirror
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: mirrorID
          in: path
          description: The id the requested mirror
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mirrorID_subscribe_body"
      responses:
        "200":
          description: Successfully subscribed to this mirror
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MirrorSubscription"
        "400":
          description: |
            - Invalid username
            - Invalid mirrorID
        "404":
          description: "- Mirror not found (or private)\n-  \n"
        "409":
          description: |
            - Subscription already exists for this mirror
            - ID conflict
  /user/{username}/subscription/{subscriptionID}:
    get:
      tags:
        - mirrorSubscription
      summary: Get a subscription by id
      operationId: getSubscriptionByID
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: subscriptionID
          in: path
          description: id of the user's subscription
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/ID"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MirrorSubscription"
        "400":
          description: |
            - invalid username
            - invalid sub ID
        "404":
          description: "- `username` isn't the authenticated user. \n- subcription not found (only if username was the authenticated user)\n"
    post:
      tags:
        - mirrorSubscription
      summary: Subscribe to a mirror
      operationId: createMirrorSubscription
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: subscriptionID
          in: path
          description: id of the user's subscription
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/subscription_subscriptionID_body"
        required: true
      responses:
        "200":
          description: Successfully subscribed.
        "409":
          description: Subscription already exists for this mirror
  /user/{username}/subscription/{subscriptionID}/refresh:
    post:
      tags:
        - mirrorSubscription
      summary: Fires a refresh on this subscription
      operationId: refreshSubscription
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: subscriptionID
          in: path
          description: id of the user's subscription
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Update has succesfully been triggered
          headers:
            X-RateLimit-Limit:
              description: Number of updates allowed per day
              style: simple
              explode: false
              schema:
                type: integer
            X-RateLimit-Remaining:
              description: Number of updates remaining
              style: simple
              explode: false
              schema:
                type: integer
        "401":
          description: Unauthorized. The authenticated user isn't 'username'
        "404":
          description: Subscription/user not found
        "429":
          description: The user requested too many updates. He/she must wait until the next day, watch an ad or upgrade his/her account.
  /user/{username}/subscription/{subscriptionID}/disable:
    post:
      tags:
        - mirrorSubscription
      summary: Disables this subscription
      operationId: disableSubscription
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: subscriptionID
          in: path
          description: id of the user's subscription
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: mode
          in: query
          description: |
            Describes what to do with the remaining events on the user calendar. Defaults to *keepAll*.

            *keepAll*: Stops syncing and doesn't delete any event.

            *deleteFuture*: Stops syncing and deletes all the events on the user calendar that start after *now*.

            *deleteAll*: Stops syncing and deletes all the events on the user calendar.
          required: true
          style: form
          explode: true
          schema:
            type: string
            enum:
              - keepAll
              - deleteFuture
              - deleteAll
      responses:
        "200":
          description: Subscription has successfully been disabled, or was already disabled
          headers:
            X-Subscriptions-Limit:
              description: Number active subscriptions at the same time allowed
              style: simple
              explode: false
              schema:
                type: integer
            X-Subscriptions-Remaining:
              description: Number of additional mirrors the user can subscribe to.
              style: simple
              explode: false
              schema:
                type: integer
        "401":
          description: Unauthorized. The authenticated user isn't 'username'
        "404":
          description: Subscription/user not found
  /user/{username}/subscription/{subscriptionID}/enable:
    post:
      tags:
        - mirrorSubscription
      summary: Enables this subscription
      operationId: enableSubscription
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
        - name: subscriptionID
          in: path
          description: id of the user's subscription
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Subscription has successfully been enabled, or was already enabled
          headers:
            X-Subscriptions-Limit:
              description: Number active subscriptions at the same time allowed
              style: simple
              explode: false
              schema:
                type: integer
            X-Subscriptions-Remaining:
              description: Number of additional mirrors the user can subscribe to.
              style: simple
              explode: false
              schema:
                type: integer
        "401":
          description: Unauthorized. The authenticated user isn't 'username'
        "404":
          description: Subscription/user not found
        "429":
          description: The user can't subscribe to more mirrors. User should upgrade his/her account.
  /checkUsername:
    get:
      tags:
        - user
      summary: Checks if a username is available
      description: |
        User must first authenticate with the oAuth service to get an tokenID. It's a minimal security to prevent bots from bruteforcing usernames to list them.
        Access is denied for authenticated users for which their username is already set.
      operationId: checkUsername
      parameters:
        - name: username
          in: query
          required: false
          style: form
          explode: true
          schema:
            pattern: ^[A-Za-z][A-Za-z0-9_]{4,19}$
            type: string
      responses:
        "200":
          description: |
            Successfull operation.
            If the returned string is 'available', the username can be used for creating an account. Otherwise it's 'used'
          headers:
            X-UsernameChecks-Limit:
              description: Maximum number of requests the authenticated client can execute.
              style: simple
              explode: false
              schema:
                type: integer
            X-UsernameChecks-Remaining:
              description: Number of additional requests the client can execute.
              style: simple
              explode: false
              schema:
                type: integer
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - available
                  - used
        "400":
          description: |
            Invalid username provided. TODO: create custom error names for the different kinds of invalid username
          headers:
            X-UsernameChecks-Limit:
              description: Maximum number of requests the authenticated client can execute.
              style: simple
              explode: false
              schema:
                type: integer
            X-UsernameChecks-Remaining:
              description: Number of additional requests the client can execute.
              style: simple
              explode: false
              schema:
                type: integer
        "401":
          description: User must be authenticated to use this endpoint (tokenID-requied)
        "403":
          description: Username already configured, this endpoint is useless for the user. (forbidden)
        "429":
          description: Too many requests. The user is still invited to attempt creating the account. (too-many-requests)
          headers:
            X-UsernameChecks-Limit:
              description: Maximum number of requests the authenticated client can execute.
              style: simple
              explode: false
              schema:
                type: integer
            X-UsernameChecks-Remaining:
              description: Number of additional requests the client can execute.
              style: simple
              explode: false
              schema:
                type: integer
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: Username of the considered user
          required: true
          style: simple
          explode: false
          schema:
            $ref: "#/components/schemas/Username"
      responses:
        "200":
          description: Operation successfull
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /rules/{mirrorID}:
    get:
      tags:
        - rule
      summary: Gets the rules of a mirror.
      description: The mirror must be public or owned by the logged in user.
      operationId: getMirrorRules
      parameters:
        - name: mirrorID
          in: path
          description: Id of the requested mirror
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Operation successfull
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rule"
        "401":
          description: Mirror is private and you do not own it.
        "404":
          description: Mirror not found
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    User:
      required:
        - pattern
        - username
      type: object
      properties:
        username:
          pattern: ^[A-Za-z][A-Za-z0-9_]{4,19}$
          type: string
    Mirror:
      required:
        - id
        - public
        - title
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        title:
          $ref: "#/components/schemas/mirrorTitle"
        description:
          $ref: "#/components/schemas/mirrorDescription"
        owner:
          pattern: ^[A-Za-z][A-Za-z0-9_]{4,19}$
          type: string
          description: Username of this mirror's owner. Can be null if this mirror has gone private or the user deleted his account while other users were subscribed
          nullable: true
          readOnly: true
          example: SuperMuel
        liked:
          type: boolean
          description: Whether the current user has liked this mirror.
          readOnly: true
          example: false
        subscribed:
          type: boolean
          description: Whether the current user is subscribed to this mirror.
          readOnly: true
          default: false
        public:
          type: boolean
          description: Whether this mirror is public. Defaults to false
        likes:
          type: integer
          description: Number of likes this mirrror has
          example: 2
        subscribersCount:
          type: integer
          description: Number of subscribers this mirror has
          readOnly: true
          example: 3
        creationDateTime:
          type: string
          description: Auto-generated by the server. Will always be ignored if specified in a request.
          format: date-time
          readOnly: true
        lastModification:
          type: string
          format: date-time
          readOnly: true
        rulesIDs:
          type: array
          items:
            $ref: "#/components/schemas/ID"
        groupLeavesIDs:
          type: array
          description: List of IDs, referencing one or multiple [GroupLeaf] objects that the mirror should reflect.
          items:
            $ref: "#/components/schemas/ID"
    MirrorSubscription:
      required:
        - enabled
        - id
        - mirrorID
      type: object
      properties:
        id:
          type: string
        mirrorID:
          $ref: "#/components/schemas/ID"
        lastRefresh:
          type: string
          description: null if unknown
          format: date-time
        enabled:
          type: boolean
    Rule:
      type: object
      properties:
        type:
          type: string
    Username:
      pattern: ^[A-Za-z][A-Za-z0-9_]{4,19}$
      type: string
      example: SuperMuel
    TokenID:
      type: string
      description: |
        tokenID obtained on the client after logging in with Apple/Google
      example: 1fbf5cf03c97c6fc...
    ID:
      maxLength: 36
      minLength: 36
      type: string
      description: Id of the entity
      example: 6ed73631-ab4f-448f-a2f1-c0542399a9b5
    mirrorTitle:
      maxLength: 50
      minLength: 5
      type: string
      description: User defined medium length string representing this mirror.
      example: L3 Maths-Info sans anglais
    mirrorDescription:
      maxLength: 1000
      type: string
      description: User defined description of this mirror.
      example: L3 Maths-Info schedule without english classes & with custom colors
    groupLeavesArray:
      type: array
      example:
        - 843aa4e2-909e-401d-a140-609cfb6dc17d
        - fed44ff2-5801-4faf-85a2-0c1e102d71af
      items:
        $ref: "#/components/schemas/ID"
    DestinationCalendar:
      type: object
    user_body:
      required:
        - tokenID
        - username
      type: object
      properties:
        tokenID:
          $ref: "#/components/schemas/TokenID"
        username:
          $ref: "#/components/schemas/Username"
    mirror_mirrorID_body:
      required:
        - groupLeavesIDs
        - title
      type: object
      properties:
        title:
          $ref: "#/components/schemas/mirrorTitle"
        description:
          $ref: "#/components/schemas/mirrorDescription"
        public:
          type: boolean
          default: false
        groupLeavesIDs:
          $ref: "#/components/schemas/groupLeavesArray"
    mirror_mirrorID_body_1:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/mirrorTitle"
        description:
          $ref: "#/components/schemas/mirrorDescription"
        groupLeavesIDs:
          $ref: "#/components/schemas/groupLeavesArray"
    mirrorID_subscribe_body:
      required:
        - ID
        - enabled
      type: object
      properties:
        ID:
          $ref: "#/components/schemas/ID"
        enabled:
          type: boolean
          description: Whether to enable this subscription just after creation
        destinationCalendar:
          $ref: "#/components/schemas/DestinationCalendar"
    subscription_subscriptionID_body:
      required:
        - destinationCalendar
        - enabled
        - mirrorID
      type: object
      properties:
        mirrorID:
          $ref: "#/components/schemas/ID"
        enabled:
          type: boolean
          description: Whether to enable this subscription just after creation
        destinationCalendar:
          $ref: "#/components/schemas/DestinationCalendar"
  parameters:
    usernamePath:
      name: username
      in: path
      description: Username of the considered user
      required: true
      style: simple
      explode: false
      schema:
        $ref: "#/components/schemas/Username"
    limit100query:
      name: limit
      in: query
      description: Maximum of entities returned. Maximum is 100.
      required: false
      style: form
      explode: true
      schema:
        type: integer
    offsetQuery:
      name: offset
      in: query
      description: Number of entities to skip
      required: false
      style: form
      explode: true
      schema:
        type: integer
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
